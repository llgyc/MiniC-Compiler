  .text
  .align   2
  .global  ififElse
  .type    ififElse, @function
ififElse:
  addi     sp, sp, -64
  sw       ra, 60(sp)
  li       s0, 5
  sw       s0, 8(sp)
  lw       s0, 8(sp)
  sw       s0, 0(sp)
  li       s0, 10
  sw       s0, 12(sp)
  lw       s0, 12(sp)
  sw       s0, 4(sp)
  lw       s0, 0(sp)
  sw       s0, 16(sp)
  li       s0, 5
  sw       s0, 20(sp)
  lw       s0, 16(sp)
  lw       s1, 20(sp)
  beq      s0, s1, .l2
  j        .l3
.l2:
  lw       s0, 4(sp)
  sw       s0, 24(sp)
  li       s0, 10
  sw       s0, 28(sp)
  lw       s0, 24(sp)
  lw       s1, 28(sp)
  beq      s0, s1, .l0
  j        .l1
.l0:
  li       s0, 25
  sw       s0, 32(sp)
  lw       s0, 32(sp)
  sw       s0, 0(sp)
  j        .l3
.l1:
  lw       s0, 0(sp)
  sw       s0, 36(sp)
  li       s0, 15
  sw       s0, 40(sp)
  lw       s0, 36(sp)
  lw       s1, 40(sp)
  add      s0, s0, s1
  sw       s0, 44(sp)
  lw       s0, 44(sp)
  sw       s0, 0(sp)
.l3:
  lw       s0, 0(sp)
  sw       s0, 48(sp)
  lw       a0, 48(sp)
  lw       ra, 60(sp)
  addi     sp, sp, 64
ret
  li       a0, -1
  lw       ra, 60(sp)
  addi     sp, sp, 64
ret
  .size    ififElse, .-ififElse
  .text
  .align   2
  .global  main
  .type    main, @function
main:
  addi     sp, sp, -16
  sw       ra, 12(sp)
  call     ififElse
  sw       a0, 0(sp)
  lw       a0, 0(sp)
  lw       ra, 12(sp)
  addi     sp, sp, 16
ret
  li       a0, -1
  lw       ra, 12(sp)
  addi     sp, sp, 16
ret
  .size    main, .-main
